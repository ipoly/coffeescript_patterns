// Generated by CoffeeScript 1.4.0
(function() {
  var Sale1, Sale2, Sale3,
    __hasProp = {}.hasOwnProperty;

  Sale1 = (function() {

    function Sale1(price) {
      this.price = price || 100;
    }

    Sale1.prototype.getPrice = function() {
      return this.price;
    };

    Sale1.prototype.decorate = function(decorator) {
      var F, i, newobj, overrides;
      F = function() {};
      overrides = this.constructor.decorators[decorator];
      F.prototype = this;
      newobj = new F();
      newobj.uber = this;
      for (i in overrides) {
        if (!__hasProp.call(overrides, i)) continue;
        newobj[i] = overrides[i];
      }
      return newobj;
    };

    Sale1.decorators = {
      fedtax: {
        getPrice: function() {
          var price;
          price = this.uber.getPrice();
          return price += price * 5 / 100;
        }
      },
      quebec: {
        getPrice: function() {
          var price;
          price = this.uber.getPrice();
          return price += price * 7.5 / 100;
        }
      },
      money: {
        getPrice: function() {
          return "$" + this.uber.getPrice().toFixed(2);
        }
      },
      cdn: {
        getPrice: function() {
          return "CDN$ " + this.uber.getPrice().toFixed(2);
        }
      }
    };

    return Sale1;

  })();

  Sale2 = (function() {

    function Sale2(price) {
      this.price = price || 100;
      this.decorators_list = [];
    }

    Sale2.prototype.getPrice = function() {
      var i, max, name, price, _i, _ref;
      price = this.price;
      max = this.decorators_list.length;
      for (i = _i = 0, _ref = max - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        name = this.decorators_list[i];
        price = Sale2.decorators[name].getPrice(price);
      }
      return price;
    };

    Sale2.prototype.decorate = function(decorator) {
      return this.decorators_list.push(decorator);
    };

    Sale2.prototype.undecorate = function(decorator) {
      var i;
      return this.decorators_list = (function() {
        var _i, _len, _ref, _results;
        _ref = this.decorators_list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i !== decorator) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this);
    };

    Sale2.decorators = {
      fedtax: {
        getPrice: function(price) {
          return price + price * 5 / 100;
        }
      },
      quebec: {
        getPrice: function(price) {
          return price + price * 7.5 / 100;
        }
      },
      money: {
        getPrice: function(price) {
          return "$" + price.toFixed(2);
        }
      },
      cdn: {
        getPrice: function(price) {
          return "CDN$ " + price.toFixed(2);
        }
      }
    };

    return Sale2;

  })();

  Sale3 = (function() {
    var toBeDecorated;

    function Sale3(price) {
      this.price = price || 100;
      this.decorators_list = [];
    }

    toBeDecorated = function(methodName, args) {
      var i, max, method, name, _i, _ref;
      max = this.decorators_list.length;
      for (i = _i = 0, _ref = max - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        name = this.decorators_list[i];
        method = Sale3.decorators[name][methodName];
        if (typeof method === "function") {
          args = method.call(this, args);
        }
      }
      return args;
    };

    Sale3.prototype.getPrice = function() {
      return toBeDecorated.call(this, "getPrice", this.price);
    };

    Sale3.prototype.getTaxName = function() {
      return toBeDecorated.call(this, "getTaxName");
    };

    Sale3.prototype.decorate = function(decorator) {
      return this.decorators_list.push(decorator);
    };

    Sale3.prototype.undecorate = function(decorator) {
      var i;
      return this.decorators_list = (function() {
        var _i, _len, _ref, _results;
        _ref = this.decorators_list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i !== decorator) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this);
    };

    Sale3.decorators = {
      fedtax: {
        getPrice: function(price) {
          return price + price * 5 / 100;
        },
        getTaxName: function(taxName) {
          if (taxName == null) {
            taxName = "";
          }
          return (taxName + " 联邦税").replace(/^\s+|\s+$/g, "");
        }
      },
      quebec: {
        getPrice: function(price) {
          return price + price * 7.5 / 100;
        },
        getTaxName: function(taxName) {
          if (taxName == null) {
            taxName = "";
          }
          return (taxName + " 省级税").replace(/^\s+|\s+$/g, "");
        }
      },
      money: {
        getPrice: function(price) {
          return "$" + price.toFixed(2);
        }
      },
      cdn: {
        getPrice: function(price) {
          return "CDN$ " + price.toFixed(2);
        }
      }
    };

    return Sale3;

  })();

  test("第一种实现：继承", function() {
    var sale;
    sale = new Sale1(100);
    sale = sale.decorate("fedtax");
    sale = sale.decorate("quebec");
    sale = sale.decorate("money");
    equal(sale.getPrice(), "$112.88", "客户在加拿大魁北克:价格生成正确");
    sale = new Sale1(100);
    sale = sale.decorate("fedtax");
    sale = sale.decorate("cdn");
    return equal(sale.getPrice(), "CDN$ 105.00", "客户在没有省税的省份:价格生成正确");
  });

  test("第二种实现：列表", function() {
    var sale;
    sale = new Sale2(100);
    sale.decorate("fedtax");
    sale.decorate("quebec");
    sale.decorate("money");
    equal(sale.getPrice(), "$112.88", "客户在加拿大魁北克:价格生成正确");
    sale = new Sale2(100);
    sale.decorate("fedtax");
    sale.decorate("cdn");
    equal(sale.getPrice(), "CDN$ 105.00", "客户在没有省税的省份:价格生成正确");
    sale.undecorate("cdn");
    equal(sale.getPrice(), "105.00", "反装饰：取消CDN的格式化");
    sale.decorate("money");
    return equal(sale.getPrice(), "$105.00", "重新用美元格式化");
  });

  test("第二种实现扩展：支持多个装饰方法", function() {
    var sale;
    sale = new Sale3(100);
    sale.decorate("fedtax");
    sale.decorate("quebec");
    sale.decorate("cdn");
    equal(sale.getPrice(), "CDN$ 112.88", "客户在没有省税的省份:价格生成正确");
    return equal(sale.getTaxName(), "联邦税 省级税", "正确的税种");
  });

}).call(this);
