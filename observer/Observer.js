// Generated by CoffeeScript 1.4.0
(function() {
  var Publisher,
    __hasProp = {}.hasOwnProperty;

  Publisher = (function() {
    var publisher;

    publisher = {
      subscribers: {
        any: []
      },
      subscribe: function(fn, type) {
        type = type || "any";
        if (typeof this.subscribers[type] === "undefined") {
          this.subscribers[type] = [];
        }
        return this.subscribers[type].push(fn);
      },
      unsubscribe: function(fn, type) {
        return this.visitSubscribers("unsubscribe", fn, type);
      },
      publish: function(publication, type) {
        return this.visitSubscribers("publish", publication, type);
      },
      visitSubscribers: function(action, arg, type) {
        var i, max, pubtype, subscribers, _i, _ref, _results;
        pubtype = type || "any";
        subscribers = this.subscribers[pubtype];
        max = subscribers.length;
        _results = [];
        for (i = _i = 0, _ref = --max; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (action === "publish") {
            _results.push(subscribers[i](arg));
          } else {
            if (subscribers[i] === arg) {
              _results.push(subscribers.splice(i, 1));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      }
    };

    function Publisher(o) {
      var i;
      for (i in publisher) {
        if (!__hasProp.call(publisher, i)) continue;
        if (typeof publisher[i] === "function") {
          o[i] = publisher[i];
        }
      }
      o.subscribers = {
        any: []
      };
      return o;
    }

    return Publisher;

  })();

  test("订阅测试", function() {
    var joe, log, paper;
    log = "";
    paper = {
      daily: function() {
        return this.publish("big news today");
      },
      monthly: function() {
        return this.publish("interesting analysis", "monthly");
      }
    };
    joe = {
      drinkCoffee: function(paper) {
        return log = "Just read " + paper;
      },
      sundayPreNap: function(monthly) {
        return log = "About to fall asleep reading this " + monthly;
      }
    };
    new Publisher(paper);
    ok(typeof paper.subscribe === "function" && typeof paper.unsubscribe === "function", "转换一个对象成为发布者");
    paper.subscribe(joe.drinkCoffee);
    paper.subscribe(joe.sundayPreNap, "monthly");
    paper.daily();
    equal(log, "Just read big news today", "joe 订阅成功");
    paper.daily();
    equal(log, "Just read big news today", "joe 订阅成功");
    paper.daily();
    equal(log, "Just read big news today", "joe 订阅成功");
    paper.monthly();
    return equal(log, "About to fall asleep reading this interesting analysis", "joe 订阅成功");
  });

}).call(this);
