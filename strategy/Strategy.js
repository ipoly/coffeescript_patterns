// Generated by CoffeeScript 1.4.0
(function() {
  var validator,
    __hasProp = {}.hasOwnProperty;

  validator = {
    types: {},
    msg: [],
    config: {},
    validate: function(data) {
      var checker, i, msg, result_ok, type;
      this.msg = [];
      for (i in data) {
        if (!__hasProp.call(data, i)) continue;
        type = this.config[i];
        checker = this.types[type];
        if (!type) {
          continue;
        }
        if (!checker) {
          throw {
            name: "ValidationError",
            message: "No handler to validate type: " + type,
            toString: function() {
              return this.message;
            }
          };
        }
        result_ok = checker.validate(data[i]);
        if (!result_ok) {
          msg = "Invalid value for *" + i + "*";
          this.msg.push(msg);
        }
      }
      return this.hasErrors();
    },
    hasErrors: function() {
      return this.msg.length !== 0;
    }
  };

  validator.types = {
    isNonEmpty: {
      validate: function(value) {
        return value !== "";
      }
    },
    isNumber: {
      validate: function(value) {
        if (value === "") {
          return true;
        } else {
          return !isNaN(parseInt(value));
        }
      }
    },
    isAlphaNum: {
      validate: function(value) {
        return !/[^a-z0-9]/i.test(value);
      }
    }
  };

  test("验证策略测试", function() {
    var data;
    validator.config = {
      first_name: "xxxx"
    };
    data = {
      first_name: "Super"
    };
    return throws(function() {
      return validator.validate(data);
    }, /No handler to validate type: xxxx/, "没有验证方法存在时报错");
  });

  test("验证方法测试", function() {
    var data;
    validator.config = {
      first_name: "isNonEmpty",
      age: "isNumber",
      username: "isAlphaNum"
    };
    data = {
      first_name: "Super"
    };
    validator.validate(data);
    ok(!validator.hasErrors(), "first_name 不为空则正确");
    data = {
      first_name: ""
    };
    validator.validate(data);
    ok(validator.hasErrors(), "first_name 为空则报错");
    equal(validator.msg[0], "Invalid value for *first_name*", "first_name 报错信息正确");
    data = {
      age: ""
    };
    validator.validate(data);
    ok(!validator.hasErrors(), "age 可以为空");
    data = {
      age: "10n"
    };
    validator.validate(data);
    ok(!validator.hasErrors(), "age 可以转化为数字");
    data = {
      age: "twenty"
    };
    validator.validate(data);
    ok(validator.hasErrors(), "age 非数字报错");
    return equal(validator.msg[0], "Invalid value for *age*", "age 报错信息正确");
  });

}).call(this);
