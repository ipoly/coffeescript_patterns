// Generated by CoffeeScript 1.4.0
(function() {
  var agg;

  window.Iterator = (function() {

    function Iterator(num) {
      var data, error, i, index, length, n;
      error = {
        name: "error",
        message: "实例化需要一个整数",
        toString: function() {
          return "" + this.name + " :" + this.message;
        }
      };
      num = parseInt(num);
      if (!num) {
        throw error;
      }
      index = 0;
      data = (function() {
        var _i, _len, _ref, _results;
        _ref = new Array(num);
        _results = [];
        for (n = _i = 0, _len = _ref.length; _i < _len; n = ++_i) {
          i = _ref[n];
          _results.push("object" + n);
        }
        return _results;
      })();
      length = data.length;
      this.total = function() {
        return length;
      };
      this.current = function() {
        return data[index];
      };
      this.hasNext = function() {
        return index < length;
      };
      this.next = function() {
        if (this.hasNext()) {
          return data[++index];
        } else {
          return null;
        }
      };
      this.rewind = function() {
        return index = 0;
      };
    }

    return Iterator;

  })();

  agg = 0;

  test("初始化迭代器", function() {
    throws(function() {
      return agg = new Iterator("text");
    }, /error/, "不以整数实例化时报错");
    agg = new Iterator(5);
    return equal(agg.total(), 5, "生成有5个元素的迭代器");
  });

  test("迭代器操作", function() {
    agg = new Iterator(5);
    equal(typeof agg.hasNext, "function", "拥有hasNext方法");
    equal(typeof agg.next, "function", "拥有next方法");
    equal(typeof agg.rewind, "function", "拥有rewind方法");
    equal(agg.current(), "object0", "第1个元素为'object0'");
    equal(agg.next(), "object1", "返回到第2个元素");
    equal(agg.next(), "object2", "返回到第3个元素");
    equal(agg.next(), "object3", "返回到第4个元素");
    equal(agg.next(), "object4", "返回到第5个元素");
    equal(agg.next(), null, "最后返回null，迭代完成");
    agg.rewind();
    return equal(agg.current(), "object0", "rewind() 工作正常");
  });

}).call(this);
